/*
 Navicat Premium Data Transfer

 Source Server         : localhost
 Source Server Type    : MySQL
 Source Server Version : 50721
 Source Host           : localhost
 Source Database       : blog

 Target Server Type    : MySQL
 Target Server Version : 50721
 File Encoding         : utf-8

 Date: 05/11/2018 16:39:37 PM
*/

SET NAMES utf8;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
--  Table structure for `admin_table`
-- ----------------------------
DROP TABLE IF EXISTS `admin_table`;
CREATE TABLE `admin_table` (
  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(20) NOT NULL,
  `password` varchar(100) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `admin_table`
-- ----------------------------
BEGIN;
INSERT INTO `admin_table` VALUES ('1', 'sylvia', '91f2fdd79a9c4fae910d526be8d5bc22');
COMMIT;

-- ----------------------------
--  Table structure for `articles_table`
-- ----------------------------
DROP TABLE IF EXISTS `articles_table`;
CREATE TABLE `articles_table` (
  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `content` text NOT NULL,
  `picture` varchar(300) NOT NULL,
  `type` varchar(20) NOT NULL,
  `date` text NOT NULL,
  `intro` text NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=102 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `articles_table`
-- ----------------------------
BEGIN;
INSERT INTO `articles_table` VALUES ('81', '转载：当我们说“一切皆对象”时，我们到底在说什么', '  <div class=\"articleWrap\">\r\n<p>今天，非技术方向的同事问了我一个问题“js中一切皆对象到底是个啥意思，值类型也是？为什么有这个说法呢”(原话)，那么，故事就从这里开始</p>  \r\n<p>老规矩，纯技术流解释在后面，懒得看废话的同学直接翻到最后，谢谢</p>\r\n  <p>首先，刚看到这个问题，我心里居然冒出来一堆很禅意的东西，瞬间觉得自己是不是快成仙了[捂脸]</p>\r\n  <h4>问题1. JS里是不是一切皆对象呢</h4>\r\n  <p>是的</p>\r\n  <p>JavaScript作为一门高级语言(脚本)，的确一切都是对象，而非基本数据类型。而且不止JS，Java、Python等所有高级语言，都是处于“一切皆对象”的状态</p>\r\n  <h4>问题2. 到底啥叫“一切皆对象”呢</h4>\r\n  <p>回答这个问题，我们需要先搞明白，高级语言和底层语言的区别：</p>\r\n  <p>回答这个问题，我们需要先搞明白，高级语言和底层语言的区别：</p>\r\n  <p>那么，问题来了</p>\r\n  <h4>问题3. 现在我们来回归一下本质：到底什么是“对象”</h4>\r\n  <p><strong>在我眼里看来，对象其实有两重含义</strong></p>\r\n  <p><strong>一种思想、工具：</strong></p>\r\n  <p>\r\n    <li>人类毕竟是生物，脑容量究竟是有限的，所以无法理解过于复杂的东西；为了降低复杂度，至少降低到程序员能理解的程度，我们需要忽略大部分细节，把精力集中到问题主干上；面向对象的核心就在这里，通过封装屏蔽掉各种细节，帮助人们把精力集中到主要结构上</li>\r\n    <li>简单的例子是，你从来不用在写程序时关心Date.getFullYear、ng-directive、data-role和render的实现细节，否则你智商再高也写不出大型程序</li>\r\n  </p>\r\n  <p><strong>一种结构、包装：</strong></p>\r\n  <p>\r\n    <li>从另一种程度上，面向对象说的是一种结构，对硬件基础数据进行包装、添加更多功能，使其易于操作、安全稳定，而当我们说“一切皆对象”时，其实是说的这层意思</li>\r\n    <li>简单的例子是，C语言的原始字符串就是一段连续内存，没有length、没有match、没有charAt，也没有compareTo；不但难以操作，而且还非常容易出问题(你别告诉我没见过内存溢出，谁都年轻过，不丢人)</li>\r\n  </p>\r\n  <p>所以，我们明白了“一切皆对象”是真的，那么，两个问题：</p>\r\n  <p>1.这样好吗</p>\r\n  <p>2.对我们意味着什么</p>\r\n  <h4>这样好吗</h4>\r\n  <p>如果时间回到15年以前，我一定是坚决的“性能派”，脑子里只想着性能必须优化到极致、性能压倒一切、性能就是正义之类的</p>\r\n  <p>不过人毕竟会变得成熟，至少目前我看来可维护性和性能同样重要，甚至性能不敏感的应用中可维护性才是压倒一切的，毕竟当年24小时必须保持3个手机满电的日子真心不是人过的</p>\r\n  <p>首先，我们会发现对象这种东西，确实是性能的大敌，但它对安全性和易用性又有无可匹敌的优势\r\n其次，要分场景对待，对于人造航天器那种1个字节就是几千美金的应用，没人会去用OOP；而你写个JS，8个G的内存一多半都用不上的情况下，性能倒还真不是最重要的</p>\r\n<h4>对我们意味着什么</h4>\r\n<p>没意味啥，JS又没有本地内联代码，你担心这事儿干啥</p>\r\n<p>接下来说点结论吧</p>\r\n<p>=================纯技术流的分割线=================</p>\r\n<p>1. JS中一切皆是对象，或者说一切皆封装，而非原始数据</p>\r\n<p>2. 这样会牺牲性能，但对安全性和易用性有巨大提升</p>\r\n<p>3. 对于前端这种“非军”、“非底层”程序而言，这样并没有任何问题</p>\r\n  </div>', '101377bc2f82110484fc0afd6d974bbd.png', 'js', '2018-05-06', '文章来自http://www.cnblogs.com/dancingblue/p/JavaScript.html'), ('90', 'Quote:Get Query Strings and Parameters in Express.js', '<div class=\"articleWrap\">\n    <h4>Introduction</h4>\n    <p>We\'ll be going over how to extract information from a URL in Express.js. Specifically, how do we extract information from a query string and how do we extract information from the URL path parameters?</p>\n    <p>In this article, I assume you have some experience with Node.js and creating Express.js servers (or at least simple ones). The rest we\'ll explain throughout the article.</p>\n    <h4>Extracting Query Parameters</h4>\n    <p>Before we start, it\'d be helpful to first understand what exactly a query string/parameter is, and then we\'ll talk about how we can work with them.</p>\n    <p>So, <strong>what is a query parameter?</strong></p>\n    <p>In simple terms, a query string is the part of a URL (Uniform Resource Locater) after the question mark (?). It is meant to send small amounts of information to the server via the url. This information is usually used as parameters to query a database, or maybe to filter results. It\'s really up to you what they\'re used for.</p>\n    <p>Here is an example of a URL with query strings attached:</p>\n    <blockquote>\n      http://stackabuse.com/?page=2&limit=3\n    </blockquote>\n    <p>The query parameters are the actual key-value pairs like page and limit with values of 2 and 3, respectively.</p>\n    <p>Now, let\'s move on to the first main purpose of this article - <strong>how to extract these from our Express request object.</strong>\n    </p>\n    <p>This is a pretty common use-case in Express, and any HTTP server, so hopefully the examples and explanation I show here are clear.</p>\n    <p>Now, taking the same example from above:</p>\n    <blockquote>\n      http://stackabuse.com/?page=2&limit=3\n    </blockquote>\n    <p>We\'d like to extract both the page and limit parameters so we know which articles to return to the page that the user requested. While query parameters are typically used in GET requests, it\'s still possible to see them in POST and DELETE requests, among others.</p>\n    <p>Your query parameters can be retrieved from the query object on the request object sent to your route. It is in the form of an object in which you can directly access the query parameters you care about. In this case Express handles all of the URL parsing for you and exposes the retrieved parameters as this object.</p>\n    <p>Let\'s take a look at an example of us getting query parameters in a route:</p>\n\n    <iframe height=\'265\' scrolling=\'no\' title=\'代码演示\' src=\'//codepen.io/Sylvia31/embed/PeJbaQ/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/PeJbaQ/\'>代码演示</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n    <p>In the example above, we assume the page and limit parameters always exist. If neither of these parameters are given in the URL, we\'d receive undefined for both page and limit instead.</p>\n    <p><strong>Extract Query Parameters Without Express</strong></p>\n    <p>As a quick bonus, I wanted to show you how to do the actual parsing on your own in case you need to extract information from a URL that isn\'t using Express, or any other web framework. It\'s fairly common to create a dead-simple server using the http module, so this is good to know.</p>\n    <p>Lucky for you, Node.js already provides some great core libraries that has this functionality built in, so it is just a matter of require-ing the module and calling a few lines of code.</p>\n    <p>Here is an example using the querystring and url packages.</p>\n    <iframe height=\'265\' scrolling=\'no\' title=\'代码演示2\' src=\'//codepen.io/Sylvia31/embed/RyLoeL/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/RyLoeL/\'>代码演示2</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>You can see in this code that we require two parsing steps to get the results we want.</p>\n<p>Let\'s break this down a bit further and show what exactly is going on at each step. After calling url.parse(rawUrl) on our URL, this is what is returned to us:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示3\' src=\'//codepen.io/Sylvia31/embed/rvGWQa/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/rvGWQa/\'>代码演示3</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>Okay, we\'re a bit closer getting the data we need. But it needs to be broken down one more time. We can do this using the querystring package to parse the actual query string. For example:</p>\n<blockquote>\n  let parsedQs = querystring.parse(parsedUrl.query);\n</blockquote>\n<p>And finally, our parsedQs object contains the following:</p>\n<blockquote>\n  {page: \'2\',limit: \'3\'}\n</blockquote>\n<h4>Extracting Route Parameters</h4>\n<p>In any web application another common way to structure your URLs is to place information within the actual URL path, which are simply called route parameters in Express. We can use these to structure web pages by information/data, which are especially useful in REST APIs.</p>\n<p>Extracting these route parameters is similar to the query parameters. All we do is take the req object and retrieve our params from the params object. Pretty simple, right?</p>\n<p>Let\'s take a look at an example of doing this in our Express route:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示4\' src=\'//codepen.io/Sylvia31/embed/gzGLZe/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/gzGLZe/\'>代码演示4</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>First thing to notice is that we tell Express that our route is /tag/:id, where :id is a placeholder for anything. It could be a string or a number. So whatever is passed in that part of the path is set as the id parameter.</p>\n<p>If we were to navigate to the URL http://stackabuse.com/tag/node then id would be node, and we\'d get a bunch of articles that have the node tag on them. And req.params in this case would be {id: \'node\'}, just like the query object.</p>\n<p>As you can see, we again just take our parameter directly from an object contained within the request object.</p>\n<h4>Conclusion</h4>\n<p>In this article I presented ways to extract both the query string parameters and route path parameters a URL in the Express web framework. Here is a quick recap of how to extract the parameters we talked about:</p>\n<ul>\n  <li>req.query: directly access the parsed query string parameters</li>\n  <li>req.params: directly access the parsed route parameters from the path</li>\n</ul>\n<p>While the actual act of retrieving this data is very simple, understanding where this info comes from and what it is can be confusing for some beginners. Hopefully this article cleared some things up for you. Feel free to let us know in the comments if there is anything that is unclear.</p>\n\n  </div>', '6f9c6158773411f8f6a7abb092240ae1.png', 'node', '2018-05-07', '关于如何提取url参数的文章'), ('91', 'Quote:Socket.io: let’s go to real time!', '  <div class=\"articleWrap\">\n<h4>Socket.io: let’s go to real time!</h4>\n<p>Socket.io is one of the most prized libraries by those who develop with Node.js. Why? Because it allows </p>\n<p>synchronized communication to take place simply within your app, which means real-time communication!</p>\n<p>Can’t you see what this means? Let me say it another way: socket.io would allow you to set up a chat service on your website, for example! :)</p>\n<p>The possibilities that socket.io offers are really immense and go far beyond chat. It’s useful for everything that needs immediate communication between the visitors to your website. This can be, for example, the first brick to build a game where we can see characters develop in the browser, all without needing to reload the page!</p>\n<p>It’s tempting, isn’t it!</p>\n<h4>What does socket.io do?</h4>\n<p>Before starting to code, I would like to quickly explain the idea of socket.io. It’s a library that allows us to simplify a large number of things, but you’d be wrong to think it was ‘magic’. However, socket.io bases itself on a number of different techniques that allow real-time communication (and some of these have been around for years). The best-known and most recent one is WebSocket.</p>\n<p>It’s a recent development that appeared around the same time as HTML5, but it isn’t HTML: it’s a JavaScript API.</p>\n<p>WebSocket is a feature supported by all recent browsers. It allows synchronized bilateral exchange between the client and the server.</p>\n<p>What do you mean I’m speaking Double-Dutch?! Let’s go back to basics again. Communication on the web is usually unsynchronized. The Internet has always been this way: the client requests and the server responds (see next figure).</p>\n<p>That was fine when the web was starting out, but it’s become too limiting in recent times. We need more reactive and immediate communication. In this diagram, for example, the server can’t decide for itself to send something to the client (for example to say: \"oh there’s a new message!\"). It has to be the client who reloads the page or takes action to call the server because it doesn’t have the right to talk to the client on its own.</p>\n<p>WebSocket is an innovation that allows a sort of ‘tube’ of communication that remains open between the client and the server. The browser and the server stay connected to each other and can exchange messages, in one direction and the other, through this tube. So from now on the server can decide on its own to send a message to the client like a grown up (see next figure)!</p>\n<p>Socket.io allows us to use WebSockets very easily. And, as all browsers don’t generate WebSockets, it is capable of using other synchronized communication techniques if they are managed by the client’s browser. Have a look at the Browser support section of the socket.io website. We can see that socket.io determines which real-time communication method is best suited to each client:</p>\n\n<ul>\n  <li>WebSocket</li>\n  <li>Adobe Flash Socket</li>\n  <li>AJAX long polling</li>\n  <li>AJAX multipart streaming</li>\n  <li>Forever Iframe</li>\n  <li>JSONP Polling</li>\n</ul>\n<blockquote>\n  For example, if the browser doesn’t support WebSocket but Flash is installed, socket.io will go through Flash to do the communication in real time. If not, it can use other techniques such as AJAX Long Polling (the client continuously asks the server if there are any updates for them, not the neatest or most efficient method, but it works) or \"Forever Iframe\" which is based on an invisible iframe that loads progressively to retrieve updates from the server.\nThe good news is that you don’t need to know the details about how these techniques work. However, I think it’s good to at least know their name and that they exist.\n</blockquote>\n<p>Thanks to all of these different techniques, socket.io supports a large number of browsers, even old ones:</p>\n<ul>\n  <li>Internet Explorer 5.5+ (yes, you read that correctly!).</li>\n  <li>Safari 3+</li>\n  <li>Google Chrome 4+</li>\n  <li>Firefox 3+</li>\n  <li>Opera 10.61+</li>\n  <li>Safari for iPhone and iPad</li>\n  <li>The Android browser</li>\n</ul>\n<p>Now that we know a bit more about how socket.io works, could we start using it? :D</p>\n<h4>Sending and receiving messages with socket.io</h4>\n<p>Let’s get to the point: how do we use socket.io?</p>\n<p><strong>Installing socket.io</strong></p>\n<p>The first step, obvious as it may seem, is to install socket.io. Don’t laugh, the first time I wanted to use it I wasted 15 minutes before realizing that I had forgotten to do a simple:</p>\n<blockquote>\n  npm install socket.io\n</blockquote>\n<p>I just saved you 15 minutes of your life! Don’t thank me, it’s only right and proper.</p>\n<p><strong>First code: a client logs on</strong></p>\n<p>When we use socket.io, we must always deal with two files at the same time:</p>\n<ul>\n  <li>The server file (e.g. app.js): it’s this one that centralizes and manages the connections of the different clients who are connected to the website.</li>\n  <li>The client file (e.g. index.html): it’s this one that connects to the server and displays results in the browser.</li>\n</ul>\n<p><strong>The server (app.js)</strong></p>\n<p>I deliberately separated the server code into two parts: at the beginning, we load the server as usual (and retrieve and return the content of the index.html page); then, we load socket.io and manage socket.io’s events.</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'deVNPV\' src=\'//codepen.io/Sylvia31/embed/deVNPV/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/deVNPV/\'>deVNPV</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>This code does 2 things:</p>\n<ul>\n  <li>It sends back the index.html file when a client asks to change the page in their browser.</li>\n  <li>It prepares itself to receive requests via socket.io. Here, we are expecting to receive just one type of message: the connection. When we connect via soccer.io, we log the information in the console here.</li>\n</ul>\n<p>Imagine you’re a visitor. You open your browser where the app is located (http://localhost:8080 in this case). We send you the index.html file, the page loads. In this file, which we are going to see in a minute, a JavaScript code connects to the server, this time not in http but via socket.io (therefore via WebSockets in general). The client carries out 2 types of connections:</p>\n<ul>\n  <li>A \"classic\" connection to the HTTP server to load the index.html page.</li>\n  <li>A \"real time\" connection to open a tunnel via the WebSockets thanks to socket.io.</li>\n</ul>\n<p><strong>The client (index.html)</strong></p>\n<p>Let’s look at the client for now. The index.html file is sent by the Node.js server. It’s an HTML file as classic as they come, the only difference being that it contains a bit of JavaScript that then allows for real-time communication with the server via socket.io:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'bMogdz\' src=\'//codepen.io/Sylvia31/embed/bMogdz/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/bMogdz/\'>bMogdz</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<blockquote>\n  I deliberately put my JavaScript code at the end of the HTML code. Of course, I could have put it in the <head> tag as many do, but placing it at the end of the HTML code avoids the loading of the JavaScript interfering with the loading of the HTML page. Lastly, it gives the appearance of a faster-loading webpage.\n</blockquote>\n<p>Firstly, In a fist instance, we retrieve the socket.io.js file from the client. This is automatically provided by the Node.js server via the socket.io module (so the path to the file isn’t chosen at random):</p>\n<blockquote>\n  script src=\"/socket.io/socket.io.js\"\n</blockquote>\n<p>The code that it contains enables management of communication with the server on the client side, either with WebSockets or with one of the other methods that I told you about if the browser doesn’t support them.</p>\n<p>Then, we can carry out actions on the client side to communicate with the server. For the moment, I’ve done something very simple: I connected to the server. It’s on my machine, which explains the http://localhost:8080address. Obviously, on the web, the path will need to be adapted to show your website address (e.g.http://mysite.com).</p>\n<blockquote>\n  var socket = io.connect(\'http://localhost:8080\');\n</blockquote>\n<p><strong>Let’s test the code!</strong></p>\n<p>You just need to launch the app:</p>\n<blockquote>\n  node app.js\n</blockquote>\n<p>We can then go to our browser at this Node.js address: http://localhost:8080 here.</p>\n<p>A basic page will load. Your computer will then open a connection with socket.io and the server should display debugging information in the console:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'OZxWya\' src=\'//codepen.io/Sylvia31/embed/OZxWya/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/OZxWya/\'>OZxWya</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>Great! This means that our code works. :)</p>\n<p>For the moment it doesn’t do anything particularly extraordinary, but we’ve got the basics. Now it’s time to get down to exchanging messages with the server!</p>\n<p><strong>Sending and receiving messages</strong></p>\n<p>Now that the client is connected, we can exchange messages between the client and the server. There are 2 possible scenarios:</p>\n<ul>\n  <li>The server wants to send a message to the client.</li>\n  <li>The client wants to send a message to the server.</li>\n</ul>\n<p><strong>The server wants to send a message to the client.</strong></p>\n<p>I suggest that the server sends a message to the client when they connect, to confirm that the connection has worked properly. Add this to the app.s file:</p>\n<blockquote>\n  io.sockets.on(\'connection\', function (socket) {\n        socket.emit(\'message\', \'You are connected!\');\n});\n</blockquote>\n<p>\n  When we detect a connection, we send a message to the client with socket.emit(). The function takes 2 settings:\n</p>\n<ul>\n  <li>The type of message that we want to transmit. Here, my message is message type (I’m not very creative, I know). This will allow you to distinguish between the different types of messages. For example, in a game, we could send \"move_player\", \"attack_player\" type messages.</li>\n  <li>The content of the message. Here you can say whatever you want.</li>\n</ul>\n<p>If you want to send several types of data in your message, group them in the form of objects like this, for example:</p>\n<blockquote>\n  socket.emit(\'message\', { content: \'You are connected!\', importance: \'1\' });\n</blockquote>\n<p>On the index.html file side (the client), we’re going to listen to \"message\" type messages arriving:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示10\' src=\'//codepen.io/Sylvia31/embed/xjXgVq/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/xjXgVq/\'>代码演示10</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>With socket.on(), we listen for message type messages. When the messages arrive, we call for the callback function that, in this case, displays a simple dialog box.</p>\n<p>Try it. You’ll see that when you load the index.html page, a dialog box is displayed telling you that the connection was successful (see next figure).</p>\n<p><strong>The client wants to send a message to the server.</strong></p>\n<p>Now, let’s do it the other way around. I suggest adding a button in the web page that sends a message to the server when it’s clicked on.</p>\n<p>On the client’s side (index.html), I’m going to add a \"Poke the server\" button. When we click on it, a message will be sent to the server. Here’s the complete code:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示11\' src=\'//codepen.io/Sylvia31/embed/wjrgGN/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/wjrgGN/\'>代码演示11</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<blockquote>\n  Here, I’m using jQuery for practical reasons (because I’m used to it) to retrieve the event of the click of the button, but it’s not compulsory. You can do that in JavaScript if you want.\n</blockquote>\n<p>Finally, the only new and exciting code here is:</p>\n<blockquote >\n  $(\'#poke\').click(function () {\n    socket.emit(\'message\', \'Hi server, how are you?\');\n})\n</blockquote>\n<p>It’s very simple. When we click on the button we send a message type message to the server, along with content.</p>\n<p>If we want to retrieve this on the server side, we are going to have to add listening to message type messages in the callback function of the connection:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示12\' src=\'//codepen.io/Sylvia31/embed/vjegKj/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/vjegKj/\'>代码演示12</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>Launch the code! Click on the Poke the server button on the page and watch the server console. You should see the next figure appear.</p>\n<blockquote>\n  A client is talking to me! They’re saying: Hi server, how are you?\n</blockquote>\n<h4>Communicating with several clients</h4>\n<p>In all our previous examples, we worked with one server and one client. In practice, you will probably have several clients connected to your Node.js application (or at least I hope you do!). To simulate this locally, it’s very simple: you just need to open two tabs, both on the http://localhost:8080 page. The server will see 2 different clients connected.</p>\n<p><strong>When we have several clients, we must be able to:</strong></p>\n<ul>\n  <li>Send a message to everyone at the same time. We call those <strong>broadcasts.</strong></li>\n  <li>Remember information about each client (like their username, for example). For that we need <strong>session variables.</strong></li>\n</ul>\n<p>Surprise surprise, that’s exactly what I was going to show you next!</p>\n<p><strong>Sending a message to all the clients (broadcasts)</strong></p>\n<p>When you do a socket.emit() on the server side, you only send a message to the client that you’re currently talking to. But you can do better than that: you can send a broadcast, meaning a message destined for all the other clients (except the one which the server just connected to).\n</p>\n<p>Let’s take this scenario:</p>\n<ul>\n  <li>Client A sends a message to the server.</li>\n  <li>The server analyses it.</li>\n  <li>It decides to broadcast this message and send it to the other clients who are connected: B and C.</li>\n</ul>\n<p>Imagine for example a chat. Client A writes a message and sends it to the server. So that the other clients can see the message, it must be broadcast.</p>\n<p>That’s really simple!</p>\n<blockquote>\n  socket.broadcast.emit(\'message\', \'Message to all units. I repeat, message to all units.\');\n</blockquote>\n<p>You just need to do a socket.broadcast.emit() and the message will go to all other clients who are connected. Add a broadcast in app.js, for example, when a client connects:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示13\' src=\'//codepen.io/Sylvia31/embed/bMogBJ/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/bMogBJ/\'>代码演示13</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>Now try opening 2 tabs (or more) on your http://localhost:8080 page. You’ll see that when a new client arrives, the other pages react instantly and say: \"Another client has just connected!\"</p>\n<p><strong>Session variables</strong></p>\n<p>When you have several clients connected, you’ll soon realize that it is hard to recognize them. The ideal thing would be to be able to memorize information about each client in session variables... but session variables are not enabled by default by socket.io. </p>\n<p>Actually, session variables need to be managed in another library via a piece of middleware like session.socket.io (they work like the middleware in Express, a bit like plugins).</p>\n<p>I would probably need to write a whole chapter to show you how to use a piece of middleware that manages sessions. To spare you that, I\'m going to give you a magic trick: just save the information as a variable in the socket object of each client. It\'ll be easy to set up!</p>\n<blockquote>\n  I\'m going to suggest a very simplified technique that you can try quickly. It\'s not the best method: just see it as a workaround to get started. If you are really serious about managing sessions, then you should use a piece of middleware like session.socket.io.\n</blockquote>\n<p>So we want to server to remember information about each client who\'s connected. This way, the client won\'t need to remind us who they are each time they send a message!</p>\n<p>To stock a session variable on the server side, all you need to write is:</p>\n<blockquote>\n  socket.myvariable = myvariable;\n</blockquote>\n<p>In this example, we store the data in a variable in the client\'s socket object (remember, the server stores one socket object for each client).\n\nTo retrieve this information in the future, you\'ll just need to see the contents of socket.myvariable:</p>\n<blockquote>\n  console.log(socket.myvariable);\n</blockquote>\n<p>Simple, isn’t it? Let’s try to imagine a practical case. When a client connects, the webpage asks them for their username. The server will stock the username in the session variable to use it when the client clicks on \"Poke the server\".</p>\n<p>Let’s see what modifications we need to do…</p>\n<p>The web page (index.html) emits a signal containing the username</p>\n<p>When the web page is loaded, we’re going to ask for the visitor’s username. We send this username to the server via a \"little_newbie\" signal (I called it this to differentiate it from the \"message\" signals). This signal contains the visitor’s username:</p>\n<blockquote>\n  var username = prompt(\'What\\\'s your username?\');\nsocket.emit(\'little_newbie\', username);\n</blockquote>\n<p>The server (app.js) stores the username</p>\n<p>The server must retrieve this signal. We then listen for the \"little_newbie\" signal and, when we receive it, we save the username as a session variable:</p>\n<blockquote>\n  socket.on(\'little_newbie\', function(username) {\n    socket.username = username;\n});\n</blockquote>\n<p>The server (app.js) remembers the username when we send it a message</p>\n<p>Now, we would like the server to remember us when we poke it by clicking on the Poke server button (which triggers the sending of the \"message\" signal). We’re going to complete the callback function that is called when the server receives a \"message\":</p>\n<blockquote>\n  socket.on(\'message\', function (message) {\n    console.log(socket.username + \' is speaking to me! They\\\'re saying: \' + message);\n});\n</blockquote>\n<p>As soon as we receive a message, we ask for the username session variable to be retrieved from the client\'s socket.</p>\n<p><strong>Testing the code</strong></p>\n<p>Try to open 2 windows giving different usernames each time. Then click on Poke the server. You’ll see the username of the person who clicked on the button in the console!</p>\n<p>I  did the test for myself with two windows, one with the username \"mateo21\" and the other with the username \"robert\". In the next figure, you can see at the bottom of the console that it has actually recognized who just clicked!</p>\n<p><strong>The complete code</strong></p>\n<p>I  deliberatley gave you very short bits of code to explain the idea to you, but I’m sure you’re dying to have the full code to carry out your tests. ;)</p>\n<p>So, let’s go! Here’s index.html:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示14\' src=\'//codepen.io/Sylvia31/embed/KRXavp/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/KRXavp/\'>代码演示14</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>\n  … and here is the app.\'s application server:\n</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示15\' src=\'//codepen.io/Sylvia31/embed/odGBeE/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/odGBeE/\'>代码演示15</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>I hope that I have explained commented the code well enough so you can find your way round it. ;)</p>\n<blockquote>\n  Remember that it’s a basic app to try out socket.io functions. It doesn\'t do anything interesting or fascinating, it’s up to you to have fun fiddling about with it to practice. Do something exciting with it… or at least something more useful that what I did with it.\n</blockquote>\n<p><strong>Summing up</strong></p>\n<ul>\n  <li>Socket.io is a Node.js module that allows your visitors to communicate continuously (in real time) with the server when the page is loaded.</li>\n  <li>Socket.io is based on WebSockets, a sort of ‘super AJAX’. Your app can call the server at any time without reloading the page and the opposite is also true: your visitors can receive messages from the server at any time!</li>\n  <li>The server and the client send each other events (with socket.emit() ) and listen to the events that are sent (with socket.on() ).</li>\n</ul>\n\n  </div>\n', '07fd6191fca3ce89d4ec6831713016df.png', 'node', '2018-05-08', 'websocket库的使用'), ('92', 'MySQL-SQL查询语句', '  <div class=\"articleWrap\">\n    <h4>增 INSERT</h4>\n    <p>INSERT INTO 表（字段列表）VALUES（值列表）//字符串，要加‘ ’</p>\n    <blockquote>\n      `INSERT INTO articles_table (title,intro,content,picture,type,date) VALUE (\'${title}\',\'${intro}\',\'${content}\',\'${newFileName}\',\'${type}\',\'${date}\')`\n    </blockquote>\n    <h4>删 DELETE</h4>\n    <p>DELETE FROM 表 WHERE 条件（无法指定一列，要么全部删）</p>\n    <blockquote>\n      db.query(`DELETE FROM banner_table WHERE ID=${req.query.id}`,callback)\n    </blockquote>\n    <h4>改 UPDATE</h4>\n    <p>UPDATE 表 SET 字段=值，字段=值，……WHERE 条件（不加where就是操作整个表）</p>\n    <blockquote>\n      db.query(`UPDATE banner_table SET \\\n           title=\'${req.body.title}\',\\\n           description=\'${req.body.description}\',\\\n           href=\'${req.body.href}\'\\\n           WHERE ID=${req.body.mod_id}`,callback)\n    </blockquote>\n    <h4>查 SELECT</h4>\n    <p>SELECT * FROM 表 WHERE 条件</p>\n    <h4>子句</h4>\n    <p><strong>WHERE 条件</strong></p>\n    <p>WHERE name=\'blue\'</p>\n    <p>WHERE age>18</p>\n    <p>WHERE age<18</p>\n    <p>WHERE age>=18 AND score<60</p>\n    <p>WHERE cash>100 OR score>10000</p>\n    <p><strong>ORDER 多条件排序</strong></p>\n    <p>ORDER BY age ASC/DESC</p>\n    <p>ASC-升序（ascending order，从小到大</p>\n    <p>DESC-降序（descending order，从大到小）</p>\n    <p>ORDER BY price ASC</p>\n    <p>ORDER BY price DESC</p>\n    <p>价格（price）升序排列，如果价格相同，再按销量（sales）排序</p>\n    <p>ORDER BY price ASC, salses DESC</p>\n    <p><strong>GROUP 聚类-合并相同</strong></p>\n    <p>统计每个班的人数</p>\n    <p>COUNT 计数</p>\n    <p>GROUP</p>\n    <p>SELECT * FROM student_table;</p>\n    <p>SELECT COUNT(*) FROM student_table;</p>\n    <p>SELECT class,COUNT(*) FROM student_table GROUP BY class;</p>\n    <p>配合COUNT、MIN、MAX、AVG运用</p>\n    <p>统计每个班平均分</p>\n    <p>SELECT class,AVG(score) FROM student_table GROUP BY class;</p>\n    <p>每个班级的最高、最低分</p>\n    <p>SELECT class,MIN(score),MAX(score) FROM student_table GROUP BY class;</p>\n    <p>每个人消费的总额</p>\n    <p>SELECT name, SUM(price) FROM sales_table GROUP BY name;</p>\n    <p>SELECT name, SUM(price) FROM sales_table GROUP BY name ORDER BY SUM(price) DESC;</p>\n    <p><strong>LIMIT 限制输出</strong></p>\n    <p>LIMIT 10;  只要前10条</p>\n    <p>LIMIT 5，8;  从5开始要8个</p>\n\n    <h4>子句之间的顺序</h4>\n    <p><strong>WHERE  GROUP  ORDER  LIMIT</strong></p>\n    <p><strong>先筛选   合并   排序   限制</strong></p>\n    <p>每个班60分以上，成绩按升序排列，并且只要前两位</p>\n    <p>SELECT class,COUNT(class) FROM student_table WHERE score>60 GROUP BY class ORDER BY COUNT(class) DESC LIMIT 2;</p>\n\n  </div>', '56bdb3df770fff5518570515ef460087.jpeg', 'mysql', '2018-05-09', '增、删、改查'), ('93', 'Grid Layout', '  <div class=\"articleWrap\">\n    <h4>父容器设置</h4>\n    <p>display:grid</p>\n    <p>grid-template-columns:  </p>\n    <p>多少个值就会有多少列，每个数值的大小控制列宽</p>\n    <p>grid-template-row:</p>\n    <p>多少个值就有多少行，每个数值的大小控制行宽</p>\n    <iframe height=\'265\' scrolling=\'no\' title=\'代码演示17\' src=\'//codepen.io/Sylvia31/embed/jxGyQW/?height=265&theme-id=light&default-tab=html,result&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/jxGyQW/\'>代码演示17</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<h4>子容器设置</h4>\n<p>grid-column-start:</p>\n<p>该子容器从那一条线开始</p>\n<p>grid-column-end:</p>\n<p>该子容器到那条线结束</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示18\' src=\'//codepen.io/Sylvia31/embed/bMogzN/?height=265&theme-id=light&default-tab=css,result&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/bMogzN/\'>代码演示18</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n\n\n  </div>', '5ffcb20cd4ee63416deb394475789574.png', 'css', '2018-05-08', '目前很多浏览器都不兼容...'), ('95', '转载：你所不知道的JSON.parse() 和 JSON.stringify() – 高级用法', '<div class=\"articleWrap\">\n<h4>JSON.parse()</h4>\n<p>JSON.parse() 可以接受第二个参数，它可以在返回之前转换对象值。比如这例子中，将返回对象的属性值大写：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示18\' src=\'//codepen.io/Sylvia31/embed/Xqepwe/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/Xqepwe/\'>代码演示18</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>注：尾随逗号在JSON 中无效，所以如果传递给它的字符串有尾随逗号，JSON.parse()将会抛出错误。</p>\n<h4>JSON.stringify()</h4>\n<p>JSON.stringify() 可以带两个额外的参数，第一个是替换函数，第二个间隔字符串，用作隔开返回字符串。</p>\n<p>参数：</p>\n<p>value ： 将要转为JSON字符串的javascript对象。</p>\n<p>replacer ：该参数可以是多种类型,如果是一个函数,则它可以改变一个javascript对象在字符串化过程中的行为, 如果是一个包含 String 和 Number 对象的数组,则它将作为一个白名单.只有那些键存在域该白名单中的键值对才会被包含进最终生成的JSON字符串中.如果该参数值为null或者被省略,则所有的键值对都会被包含进最终生成的JSON字符串中。</p>\n<p>space ：该参数可以是一个 String 或 Number 对象,作用是为了在输出的JSON字符串中插入空白符来增强可读性. 如果是Number对象, 则表示用多少个空格来作为空白符; 最大可为10,大于10的数值也取10.最小可为1,小于1的数值无效,则不会显示空白符. 如果是个 String对象, 则该字符串本身会作为空白符,字符串最长可为10个字符.超过的话会截取前十个字符. 如果该参数被省略 (或者为null), 则不会显示空白符</p>\n<p>替换函数可以用来过滤值，因为任何返回 undefined 的值将不在返回的字符串中：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'rvGydr\' src=\'//codepen.io/Sylvia31/embed/rvGydr/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/rvGydr/\'>rvGydr</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n\n<p>传入一个间隔参数的示例：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'jxGBxG\' src=\'//codepen.io/Sylvia31/embed/jxGBxG/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/jxGBxG/\'>jxGBxG</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<h4>toJSON方法</h4>\n<p>如果一个被序列化的对象拥有 toJSON 方法，那么该 toJSON 方法就会覆盖该对象默认的序列化行为：不是那个对象被序列化，而是调用 toJSON 方法后的返回值会被序列化</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示28\' src=\'//codepen.io/Sylvia31/embed/JvrWaV/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/JvrWaV/\'>代码演示28</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>利用toJSON方法,我们可以修改对象转换成JSON的默认行为。</p>\n<h4>用 JSON.stringify 来格式化对象</h4>\n<p>在实际使用中,我们可能会格式化一些复杂的对象，这些对象往往对象内嵌套对象。直接看起来并不那么直观,结合上面的的 replacer 和 space 参数,我们可以这样格式化复杂对象：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'YLrZjz\' src=\'//codepen.io/Sylvia31/embed/YLrZjz/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/YLrZjz/\'>YLrZjz</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>实际返回的字符串，记住是字符串，如下:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'NMapBj\' src=\'//codepen.io/Sylvia31/embed/NMapBj/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/NMapBj/\'>NMapBj</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n\n  </div>', 'a910e42d3258b7066dccfa027b722a6d.jpeg', 'js', '2018-05-06', 'JSON对象的两个方法'), ('96', 'React学习中几个注意点', '  <div class=\"articleWrap\">\n    <h4>1.关于JSX 语法</h4>\n    <p>React 不是一定要使用 JSX 语法，可以直接使用原生 JS。JSX语法看上去像是在Javascript代码里直接写起了XML标签，实质上这只是一个语法糖，每一个XML标签都会被JSX转换工具转换成纯Javascript代码，所以建议使用 JSX 是因为它能精确定义和反应组件及属性的树状结构，使得组件的结构和组件之间的关系看上去更加清晰。方便MXML和XAML的开发人员 – 因为他们已经使用过类似的语法；</p>\n    <h4>2.HTML 标签 和 React 组件</h4>\n    <p>在JSX语法中，遇到HTML标签（以<开头）就用HTML规则解析，遇到代码块（以{开头）就用JavaScript规则解析。React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。\n\n要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示30\' src=\'//codepen.io/Sylvia31/embed/pVWaPx/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/pVWaPx/\'>代码演示30</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>要渲染 React 模块，只需创建一个<strong>大写字母开头</strong>的本地变量。</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示31\' src=\'//codepen.io/Sylvia31/embed/ZoXrKP/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/ZoXrKP/\'>代码演示31</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>React 的 JSX 里<strong>约定分别使用首字母大、小写来区分本地模块的类和 HTML 标签。</strong></p>\n<h4>3.不建议作为 XML 属性名</h4>\n<p>由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代，React DOM 使用 className 和  htmlFor 来做对应的属性。</p>\n<h4>4.大小写敏感</h4>\n<p>上面说了JSX是一个XML语法的预处理器。 XML 语法对大小写敏感，所以习惯了HTML的同学要特别注意这点，否则折腾了半天，都不知道错在哪里。比如：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示29\' src=\'//codepen.io/Sylvia31/embed/ELwQZq/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/ELwQZq/\'>代码演示29</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>这里绑定click事件的onClick中C是大写的。</p>\n<p>暂时只有这么多，待续…</p>\n\n  </div>', '1d052416dcb8c4d929bd3182141a0a1c.jpeg', 'react', '2018-05-08', '学习React，碰到一些细节需要注意的地方'), ('97', ' 转载：JavaScript性能优化技巧', '<div class=\"articleWrap\">\n    <p>在这篇文章中，涵盖了很多广泛而又多变的环境。我们将尽量坚持“使用工具，而不是规则”的原则，把JS的流行词汇保持在最低限度。由于我们无法在2000字的文章中涵盖与 JS 性能表现相关的所有内容，所以请确保你阅读文中提到的引用资料，并在之后你自己进行了相应的研究。</p>\n    <p>但在我们深入讨论细节之前，让我们通过回答以下问题来更深入地理解：什么是高性能的 JavaScript，以及它如何适应更广泛的 web 性能指标？</p>\n    <h4>设置场景</h4>\n    <p>首先，让我们从以下方面着手：如果你只是在桌面设备上进行测试，那么你将会排除超过50%的用户。</p>\n    <p>这种趋势只会继续增长，因为新兴市场用户首选是低于100美元的 Android 设备。桌面设备作为访问互联网的主要设备的时代已经结束，接下来的10亿互联网用户将主要通过移动设备访问你的网站。</p>\n    <p>在 Chrome DevTools 设备模式(device mode) 不是在真实设备上测试的有效替代品。虽然使用CPU和网络节流(network throttling)有所帮助但这种方式非常粗暴，往往事与愿违。请在真实设备上进行测试。</p>\n    <p>\n      即使您正在真实的移动设备上进行测试，你可能会这样做你的品牌打新的600美元的旗舰手机。问题是，这不是你的用户所拥有的设备。这款设备的中位设备是 Moto G1 ，该设备的内存不足1GB，CPU和GPU非常弱。\n    </p>\n    <a href=\"https://docs.google.com/spreadsheets/d/1wHcNNQea28LhwQ_amFamT33d5woVrJfJy53Z1k6V090/edit#gid=1882596388\">让我们来看看在解析一个相同的 JS 包时，他们的堆积图是怎么样的呢。</a>\n    <p>哎哟。虽然这张图片只涵盖了 JS 的解析和编译时间(稍后会详细介绍)，不是一项综合性能，但却与性能紧密相关，可以被视为通用的 JS 性能指标。</p>\n    <p>引用 Bruce Lawson 的话说：“这是万维网，而不是富有的西方网络“。 所以，你的 web 性能目标是一个比你的 MacBook 或 iPhone 慢25倍的设备。让我们沉浸一下。但情况变得更糟。让我们看看我们真正的目标是什么。</p>\n    <h4>什么是真正的高性能的 JS 代码？</h4>\n    <p>现在我们知道我们的目标平台是什么，我们就可以回答下一个问题：什么是高性能的JS代码？</p>\n    <p>虽然没有高性能代码的绝的定义，但是我们确实有一个以用户为中心的性能模型，我们可以把它作为参考:<a href=\'https://developers.google.com/web/fundamentals/performance/rail\'></a>RAIL模型。</p>\n    <h4>Respond （响应）</h4>\n    <p>如果你的应用能在100毫秒内响应用户操作，用户就能感觉到立即响应。这适用于可点击的元素，但不适用于滚动或拖动。</p>\n    <h4>Animate （动画）</h4>\n    <p>在60Hz的显示器上，我们希望在动画和滚动时，以每秒60帧的帧为目标。结果是每帧大约16ms。在16ms的预算中，您实际拥有8个10ms来完成所有的工作，其余部分被浏览器内部和其他的差异占用。</p>\n    <h4>Idle work</h4>\n    <p>如果你有一个昂贵的且持续运行的任务，请确保将其分割为较小的块，以允许主线程对用户输入做出反应。你不应该有任务延迟超过50ms的用户输入。</p>\n    <h4>Load （加载）</h4>\n    <p>你应该将页面加载定位在1000毫秒以内。所有事情结束了，你的用户开始变得焦躁等待。这在移动设备上是一个非常难达到的目标，因为它涉及到页面交互，不只是把它绘制在屏幕和和可滚动的页面上。在实践中，它甚至更少。</p>\n    <p>在实践中，目标是 5s 的交互时间。 这是Chrome在其 Lighthouse 审核中使用的内容。</p>\n    <p>如果一个移动站点的加载时间超过3秒，那么就会有53%的访问被放弃。</p>\n    <p>2人中有1个人希望在不到2秒的时间内加载页面。</p>\n    <p>77% 的移动站点在3G网络上加载，时间超过10秒。</p>\n    <p>在3G网络上，移动站点的平均加载时间是19秒。</p>\n    <p>应用程序在桌面设备上（使用网线）在8秒内可交互，在手机上为16秒（ Moto G4 使用3G网络）</p>\n    <p>在中位设备上，开发者为他们的页面装载了 410KB gzip 的 JS 压缩文件。</p>\n    <p>是不是感到十分沮丧啊？ 那好，接下来让我们开始修复这些问题。</p>\n    <h4>上下文就是一切</h4>\n    <p>您可能已经注意到，主要的瓶颈是加载你网站所需的时间。具体来说，就是 JavaScript 的下载，解析，编译和执行时间。对于这些好像没有什么好办法来优化，除了加载更少的 JavaScript 和更聪明的加载。</p>\n    <p>但是，除了启动网站之外，你的代码所做的实际工作又如何呢?必须有一些性能上的好处，对吧？</p>\n    <p>在深入优化代码之前，请考虑你在构建什么。你在构建一个框架还是一个 VDOM 库？你的代码是否需要每秒执行数千次操作？你是否正在做一个时序要求严格的库来处理用户输入 和/或 动画？如果没有，你可能想要把你的时间和精力转移到更加影响性能的地方。</p>\n    <p>当然，我并不是说编写性能代码并不重要，但它通常不会对项目的宏观计划产生什么影响，尤其是在讨论微观优化时。因此，在通过比较来自JSperf.com 的结果，进入关于 .map 、.forEach 和 for 循环的 Stack Overflow 争论之前，一定要看到整片森林，而不只是树木。50k ops/s 听起来好于 1k ops/s 50倍，但在大多数情况下，它并没有带来什么不同。</p>\n    <h4>解析，编译和执行</h4>\n    <p>从根本上说，大多数非性能的 JS 的问题不是运行代码本身，而是在代码开始执行之前必须要执行的所有步骤。</p>\n    <p>我们这里讨论的是抽象层次。计算机中的 CPU 运行机器代码。你在计算机上运行的大多数代码都是编译后的二进制格式。(我说的是代码，而不是程序，考虑到现在所有的电子应用程序。)也就是说，除了所有操作系统级别的抽象之外，它都是在你的硬件上本地运行的，不需要任何准备工作。</p>\n    <p>JavaScript 并不是预编译的。它通过浏览器的可读代码到达(通过一个相对较慢的网络)，所有意图和目的，为您的JS程序的“操作系统”。</p>\n    <p>首先需要对代码进行解析，然后读取并将其转换为可用于编译的计算机可索引结构。然后，它会被编译成字节码和最后是机器码，然后它才可以在你的 设备/浏览器 上执行。</p>\n    <p>另一件非常重要的事情是，JavaScript是单线程的，并且在浏览器的主线程上运行。这意味着一次只能运行一个进程。如果你的 DevTools 的性能时间线充满黄色峰值，表示浏览器正在以 100％的使用率运行你的 CPU ，你会有长/丢帧，卡顿滚动和所有其他的讨厌情况。</p>\n    <a href=\"https://aerotwist.com/blog/when-everything-is-important-nothing-is/\"></a>\n    <p>所以在JS开始工作之前，需要完成所有这些工作。在 Chrome 的 V8 引擎中，解析和编译占JS执行总时间的50％。</p>\n    <a href=\"https://medium.com/reloading/javascript-start-up-performance-69200f43b201\"></a>\n    <p>您应该在这一章节中理解两件事情：</p>\n    <p>1.JS 解析时间与 JS 包大小虽然不一定是线性比例，但是你装载的 JavaScript 肯定是越少越好。</p>\n    <p>2.你使用的每个JS框架(React，Vue，Angular，Preact …) 都是另一个抽象层次 (除非它是一个预编译的框架，比如 Svelte )。它不仅会增加您的包大小，而且还会减慢你的代码，因为你不会直接与浏览器对话。</p>\n    <p>有一些方法可以缓解这种情况，比如使用 service workers 在后台和另一个线程中执行任务，使用 asm.js 编写代码，更容易编译成机器指令，但这是一个完全不同的话题。</p>\n    <p>但是，你可以做什么呢？避免使用一切的 JS 动画框架，并阅读什么情况触发浏览器重绘(paint) 和 布局(layout)（愚人码头注：这是高开销的两个点）。只有在完全没有办法使用常规的 CSS transitions 和 animations 来实现动画时，才能使用这些库。</p>\n    <p>即使他们可能使用 CSS transitions ，合成属性和requestAnimationFrame()，他们仍然在主线程的JS上运行。他们基本上只是每 16ms 用内联样式修改你的 DOM ，因为他们没有别的办法可以做到这一点。你需要确保你所有的JS都会在每帧 8ms 以内完成，以保持动画的平滑。</p>\n    <p>另一方面，CSS animations 和 transitions ，会在 GPU 的主线上运行，如果能够高效执行，则不会导致重新布局(relayouts)/重排(reflows)。</p>\n    <p>考虑到大多数动画都是在加载或用户交互过程中运行的，这可以给你的web应用程序提供急需的喘息空间。</p>\n    <p>Web Animations API 是一个即将推出的功能集合，它可以让你在主线程上做性能的JS动画，但是现在，你要坚持 CSS transitions 和像 FLIP 这样的技术。</p>\n    <h4>包的尺寸就是一切</h4>\n    <p>今天，一切都是关于 bundles(包) 的。Bower的时代和几十个 script 标签在放在/body 结束标签前的形式几乎已经消失了。</p>\n    <p>现在，不管你在npm上发现了什么闪亮的新玩具，都可以通过 npm install 安装，通过 Webpack 将它们打包在一起放在一个 1MB 的JS文件中，并在用户的数据计划中对你的用户进行攻击。 现在所有关于npm安装在NPM上找到的任何闪亮的新玩具，将它们与Webpack捆绑在一个巨大的单个1MB JS文件中，并迫使用户浏览器装载大文件。</p>\n    <p>尝试装载少量的JS。你的项目可能不需要整个 Lodash 库。你绝对需要使用JS框架吗？如果是，你有没有考虑过使用 React 以外的东西？如 Preact 或 HyperHTML ，它们的大小不到 React 的 1/20 。你需要 TweenMax 的滚动到顶部的动画吗？npm 的便利性 和 框架中孤立组件有一个缺点：开发人员对问题的第一反应就是把更多的 JS 扔在项目中。当你只有一把锤子的时候，一切看起来像钉子。</p>\n    <p>当你清除哪些无用的代码，并且减少 JS 装载时，试着把它更聪明一些。当你需要的时候，在把你需要的东西装载进来。</p>\n    <p>Webpack 3具有 惊人 的能力，称为代码分割和动态导入。它不需要将所有的JS模块打包到一个单独的 app.js 包中，它可以使用 import() 语法自动地分割代码，并异步加载。</p>\n    <p>你不需要使用框架，组件和客户端路由来获得它的好处。 假设你有一个驱动 .mega-widget 的复杂代码片断，可以在任意数量的页面上。你可以简单地在你的主JS文件中编写下如下内容：</p>\n    <blockquote>\n      if (document.querySelector(\'.mega-widget\')) { import(\'./mega-widget\'); }\n    </blockquote>\n    <p>如果您的应用程序在页面上找到该小部件，即 .mega-widget ，它将动态加载所需的支持代码。否则，一切都很好。</p>\n    <p>另外，Webpack需要自己的运行时间来工作，并将其注入到它生成的所有 .js 文件中。如果你使用 commonChunks 插件，您可以使用以下内容 <a href=\'https://medium.com/connect-the-dots/caching-assets-long-term-with-webpack-5ad24a4c39bd\'>将运行时提取到其自己的块(chunks)中 ：</a></p>\n    <blockquote>\n      new webpack.optimize.CommonsChunkPlugin({ name: \'runtime\', }),\n    </blockquote>\n    <p>它会将运行时从所有其他块(chunks)中剥离出来，放到它自己的文件中，在这种情况下命名为 runtime.js。只要确保在你的主 JS 包之前加载它就可以了。 例如：</p>\n    <p>它将把运行时从所有其他块中剥离出来，放到它自己的文件中，在这种情况下，命名为runtime.js。请确保在您的主JS包之前加载它。例如</p>\n    <iframe height=\'265\' scrolling=\'no\' title=\'代码演示32\' src=\'//codepen.io/Sylvia31/embed/pVWaaq/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/pVWaaq/\'>代码演示32</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n    <p>然后就是 编译代码 和 polyfills 的事情了。 如果你正在编写现代 JavaScript (ES6+)，你可能使用 Babel 将其转换为 ES5 兼容代码。由于所有的冗余，转译不仅增加了文件的大小，而且还增加了复杂性，与原生 ES6+ 代码相比，ES5 兼容代码的<a href=\'https://github.com/babel/babel/pull/6748\'></a>性能也有所下降 。</p>\n    <p>除此之外，您可能正在使用 babel-polyfill 包 和 whatwg-fetch 来修复旧浏览器中缺失的功能。那么，如果你使用 async/await 编写代码，你也使用 generators（生成器）编译时所需要包括的 regenerator-runtime …</p>\n    <p>关键是，为了支持更老的浏览器，你的 JS 包中几乎添加了10万字节的数据，这不仅是一个巨大的文件尺寸，而且对于解析和执行来说也是一个巨大的开销。</p>\n    <p>然而，这对于使用现代浏览器的人来说就是毫无意义的惩罚。我使用的方法是 Philip Walton 在 <a href=\'https://philipwalton.com/articles/deploying-es2015-code-in-production-today/\'>这篇文章</a>中提到的方法，是创建两个单独的包，并有条件地加载它们。通过 Babel 的 babel-preset-env 使这个问题变得简单。例如，你有一个专门用于支持 IE 11 的独立包，另一个没有 polyfills\n      的独立包专门用于支持最新版本的现代浏览器。</p>\n    <p>一种肮脏但有效的方法是将以下内容放置在一个内嵌脚本中：</p>\n    <iframe height=\'265\' scrolling=\'no\' title=\'代码演示33\' src=\'//codepen.io/Sylvia31/embed/yjzvKw/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/yjzvKw/\'>代码演示33</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n    <p>如果浏览器不能对 async 函数进行求值，那么我们假设它是一个旧的浏览器，那么需要装载一个 polyfilled 包。否则，用户就会得到整洁和现代的不同版本。</p>\n    <h4>结论</h4>\n    <p>我们希望您从本文中获得的好处是，JS的开销是高昂的，你应该谨慎使用。</p>\n    <p>请确保在真实的网络环境下，在低端设备上测试你的网站性能。你的站点应该尽快加载并且可交互。这意味着需要减少装载JS，并以任何必要的方式更快地加载和执行。您的代码应该总是被压缩，分割成更小的、可管理的包，并且尽可能地异步加载。在服务器端，确保启用 HTTP/2 ，以更快的并行传输，且 gzip/Brotli 压缩，以大幅减少 JS 的传输字节。</p>\n\n  </div>', '6da843ba032f08169741095f34c2d4aa.jpeg', 'js', '2018-05-08', 'https://www.sitepoint.com/javascript-performance-optimization-tips-an-overview/'), ('98', 'CSS伪类', '  <div class=\"articleWrap\">\r\n    <p>伪类可以比较精准地控制HTML中各个DOM，伪类可以分为四大类</p>\r\n    <p>1.-child</p>\r\n    <p>2.of-type</p>\r\n    <p>3.錨点伪类，a:link、a:hover、a:active和a:visited</p>\r\n    <p>4.状态伪类，:checked、unchecked、:enabled、:disabled</p>\r\n\r\n    <h4>child系列</h4>\r\n    <p>作用于子元素（body内的都算子元素，具体哪个子元素需要选择器筛选）</p>\r\n    <p>:first-child「第一个子元素」</p>\r\n    <p>:last-child「最后一个子元素」</p>\r\n    <p>:nth-child(数字)「第几个子元素」</p>\r\n    <p>:nth-child(2n)「偶数子元素」</p>\r\n    <p>:nth-child(2n+1)「奇数子元素」</p>\r\n    <p>:nth-last-child(数字)「从后面数来第几个子元素」</p>\r\n    <p>only-child「只有一个子元素（只适用于父元素内只有一个子元素的情况）」</p>\r\n    <h4>of-type系列</h4>\r\n    <p>在tag交错混杂的时候需要获取固定元素就要用伪类「of-type」</p>\r\n    <p>:first-of-type「同一种元素的第一个」</p>\r\n    <p>:last-of-type「同一种元素的最后一个」</p>\r\n    <p>:nth-of-type「同一种元素里面的第几个」</p>\r\n    <p>:nth-last-of-type()「同一种元素倒数第几个」</p>\r\n    <p>:only-of-type「只有这种元素」</p>\r\n    <h4>錨点伪类</h4>\r\n    <p>:hover「鼠标悬浮」</p>\r\n    <p>:link「未访问的链接样式」</p>\r\n    <p>:visited「已访问的链接样式」</p>\r\n    <p>:active「鼠标按压（未释放）」</p>\r\n    <p>:focus 「焦点事件」</p>\r\n    <h4>状态伪类</h4>\r\n    <p>:checked「input中的radio、buttons、checkboxes和option,两种tag所有被选中的元素的样式」</p>\r\n    <p>:unchecked查不到官方资料</p>\r\n    <p>:enabled「可操作元素（一般用于form）」</p>\r\n    <p>:disabled「不可操作元素（一般用于form）」,要在tag设置disabled，再设置为元素:disabled才有效</p>\r\n\r\n  </div>', '7baddaec9a4edd39b166ef78e3aba7f5.jpeg', 'css', '2018-05-01', '伪类超好用'), ('99', 'vue-cli跨域', '<div class=\"articleWrap\">\n    <p>跨域就是从a域名获取非a域名下的资源，由于安全性问题，这种行为会被浏览器的同源策略禁止。跨域需求不少见，因此就衍生出一些跨域请求的方法，例如jsonp</p>\n\n    <p>vue-cli默认端口是8080，和服务器端口不一致，因此在数据交互是就需要跨域</p>\n    <p><strong>处理跨域</strong></p>\n    <p>1.进入config —> index.js</p>\n    <p>2.访问指定接口时映射到需要被访问的host</p>\n    <iframe height=\'265\' scrolling=\'no\' title=\'代码演示34\' src=\'//codepen.io/Sylvia31/embed/ELwQzP/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/ELwQzP/\'>代码演示34</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n\n    <p>同时打开两个端口</p>\n    <p>1.安装</p>\n    <blockquote>\n      npm install --save-dev concurrently\n    </blockquote>\n    <p>2.将package.json的script加上</p>\n    <blockquote>\n      \"server\": \"node server.js\",\n\"go\": \"concurrently --kill-others \\\"npm run dev\\\" \\\"npm run server\\\"\"\n    </blockquote>\n    <p>3.输入命令</p>\n    <blockquote>\n      npm run go\n    </blockquote>\n\n\n  </div>', '051d52bc7b2ff8a000de7d70e8c96cb3.jpeg', 'vue', '2018-05-03', '这种跨域方案只适用于测试阶段，打包的时候，不会具备服务器，不能跨域了'), ('100', '转载：JavaScript中的function constructor和關鍵字new', '<div class=\"articleWrap\">\n   <p>建立对象的方法可以是用大括号或者new Object()，除此之外还可以用构造函数创建对象</p>\n   <h4>构造函数</h4>\n   <p>我們先建立一個函式，名稱叫做 Person，要注意的是我們在第9行的地方是使用 new 這個關鍵字，後面放的則是 function Person：</p>\n   <iframe height=\'265\' scrolling=\'no\' title=\'代码演示37\' src=\'//codepen.io/Sylvia31/embed/PeJRoB/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/PeJRoB/\'>代码演示37</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n   <p>接著我們把John呼叫出來看，會得到如下的結果，它會幫我們建立一個对象，然後裡面有Person這個function裡面的內容，並且變成了屬性名稱和屬性值：</p>\n   <blockquote>\n     //Person {firstname: \"John\", lastname: \"Doe\"}\n   </blockquote>\n   <h4>進一步來看new讓這個過程發生了什麼</h4>\n   <p>當我們使用new這個關鍵字時，實際上會先有一個空的物件被建立。</p>\n   <p>接著People這個函式會被執行（invoke）。我們知道當函式執行的時候，在execution context中會有this被建立，而當我們使用new的時候，函式裡面的this會被指定成剛剛所建立的那個空物件。</p>\n   <p>所以當執行People這個function，執行到 this.firstname 和 this.lastname 時，因為this現在指稱的是那個空物件，所以實際上是在幫這個空物件賦予屬性名稱和屬性值</p>\n   <p>在這樣的過程中，只要這個函式建構式 People 沒有指定return為其他物件，它就會直接回傳給我們這個新建立的物件。</p>\n   <p>接著讓我們透過程式碼來更清楚的了解這個執行的過程：</p>\n    <p><strong>該函式有被執行（invoke）</strong></p>\n    <iframe height=\'265\' scrolling=\'no\' title=\'代码演示38\' src=\'//codepen.io/Sylvia31/embed/erGMmN/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/erGMmN/\'>代码演示38</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>這時候在chrome中呼叫出來的結果如下，說明了當我們使用 new 在建構物件的時候People這個function確實有被執行：</p>\n<blockquote>\n  //這個函式有被執行\n//Person {firstname: \"John\", lastname: \"Doe\"}\n</blockquote>\n<p><strong>透過new會幫我們建立一個空的物件</strong></p>\n<p>現在我把我們原本的程式碼改成這樣：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示39\' src=\'//codepen.io/Sylvia31/embed/vjeREp/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/vjeREp/\'>代码演示39</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>\n這時候程式碼回傳的結果如下，表示的確在執行這個程式的過程中幫我們建立了一個新的空物件：\n</p>\n<p>Person {}</p>\n<p><strong>函式的最後若return其他物件，則原新物件內容會被覆蓋</strong></p>\n<p>現在，讓我們把原本的程式碼稍微做如下修改，增加第六行的內容：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示40\' src=\'//codepen.io/Sylvia31/embed/OZxvPo/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/OZxvPo/\'>代码演示40</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>回傳的結果如下，原本被建立的新物件不會被回傳，而是回傳我們最後return給它的內容：</p>\n<blockquote>\n  //{RETURN: \"原本this的內容就不會被回傳\"}\n</blockquote>\n<h4>构造函数的实际应用</h4>\n<p>由上面的方法，我們可以透過function的方式來建立一個新的物件，如果我們想要建立出同屬性名稱但不同屬性值的物件內容，我們可以把物件的屬性值變成參數，如此就能透過此function constructor建立出許多不同的物件：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示41\' src=\'//codepen.io/Sylvia31/embed/erGMNN/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/erGMNN/\'>代码演示41</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>如此，我們就可以透過同一個函式建構式建立出很多不同的物件。</p>\n<h4>注意！如果我們忘了加上關鍵字new</h4>\n<p>這裡有一個地方我們需要非常留意，如果你在程式撰寫的過程當中，忘記加上 new 這個關鍵字的話，例如：</p>\n<blockquote>\n  var john = Person(\'John\', \'Doe\');\n  console.log(john);\n  //undefined\n</blockquote>\n<p>如此，因為JavaScript不知道你是要執行這個程式還是要根據這個function去建立object，因次最後回傳 undefined 的結果。</p>\n<h4>最後，讓我們總結一下function constructors</h4>\n<p>其實function constructor就是普通的function，只是我們可以透過這個function來建立物件。</p>\n<p>透過在function前面加上new這個運算子，它會把函式中this這個關鍵字建立成一個新的物件，然後如果你沒有在該函式的最後指定回傳出其它物件的話，它就會自動回傳這個新的物件給你。</p>\n<p>那....如何透過function constructors來設定我們的原型（prototype）呢？讓我們在下一篇筆記來談吧！</p>\n<h4>程式範例</h4>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示42\' src=\'//codepen.io/Sylvia31/embed/GdMxpG/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/GdMxpG/\'>代码演示42</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n\n  </div>\n', 'c0590d79a1294d448a5cda862d5b932b.jpeg', 'js', '2018-05-02', '本篇主要探讨JavaScript中建立对象的方法'), ('101', '转载：在 Vue.js 中使用任意 JavaScript 第三方库', '  <div class=\"articleWrap\">\n    <p>Lodash, Moment, Axios, Async … 等等, 这些非常有用的 JavaScript 库。你可能会在你的很多 Vue.js 应用中使用它们。</p>\n    <p>但随着项目的不断增长，您通常会将代码拆分成多个组件文件或模块文件。您也可能希望在不同的环境中能够运行你的 APP ，包括服务器渲染。</p>\n    <p>除非你已经找到一个简单而强大的方法来将这些 JavaScript 库包含到你的组件和模块文件中，否则这将是一件非常麻烦的事情！</p>\n    <h4>全局变量</h4>\n    <p>将 JavaScript 第三方库 添加到项目中，最简单的办法是通过将其附加到 window 对象上，以使其成为全局变量：</p>\n    <blockquote>\n      // entry.js 文件 window._ = require(\'lodash\');\n    </blockquote>\n    <iframe height=\'265\' scrolling=\'no\' title=\'代码演示43\' src=\'//codepen.io/Sylvia31/embed/NMaYNJ/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/NMaYNJ/\'>代码演示43</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n    <p>这种情况会使 window 变量不断增长，但是最关键的是，他们不能使用服务器渲染。当应用程序在服务端运行时，window 对象是 undefined 的，因此尝试访问 window 下的属性将会抛出一个错误。</p>\n    <h4>在每个文件中导入</h4>\n    <p>另一种二流的方法是将库导入到每个文件中：</p>\n    <iframe height=\'265\' scrolling=\'no\' title=\'代码演示44\' src=\'//codepen.io/Sylvia31/embed/VxMXjy/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/VxMXjy/\'>代码演示44</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>这是有效的，但是你需要重复手动导入和移除，这是一个痛点：你必须记住将这个库导入到每个文件中，然后当你的某个文件不用这个库的时候, 记得要将它从这个文件中移除。如果你没有正确地设置你的构建工具，则可能会最终导致在构建包中存在同一个库的多个副本。</p>\n<h4>一个更好的方式</h4>\n<p>在Vue项目中使用Javascript库的最干净，最健壮的方法是将其代理为 Vue 原型对象的属性。我们用这种方式，将 Moment日期和时间库添加到我们的项目中：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示55\' src=\'//codepen.io/Sylvia31/embed/QrqmEX/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/QrqmEX/\'>代码演示55</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>由于所有组件都会继承 Vue 原型对象上方法，这将使 Moment 自动可用于任何组件，没有全局变量或任何需要手动导入的组件。它可以在任何 实例/组件 中简单地通过 this.$moment 访问被访问：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示46\' src=\'//codepen.io/Sylvia31/embed/LmzdRj/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/LmzdRj/\'>代码演示46</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>现在让我们花点时间了解一下这是如何工作的。</p>\n<h4>Object.defineProperty</h4>\n<p>我们通常会像这样设置一个对象属性：</p>\n<blockquote>\n  Vue.prototype.$moment = moment;\n</blockquote>\n<p>你可以这么做，但是通过使用 Object.defineProperty ，我们可以使用 描述符 来定义我们的属性。描述符允许我们设置一些低级细节，例如我们的属性是否可写，以及在 for 循环中枚举期间是否显示</p>\n<p>我们通常不会在日常使用 Javascript 中使用到描述符，因为 99％ 的时间我们不需要这么细致的属性分配。但这里给我们一个明显的优势：默认情况下，使用描述符创建的属性是只读的。</p>\n<p>这意味着，一些糊涂的开发人员（可能是你）不能在组件内去做一些很愚蠢的事情, 并且破坏一切.</p>\n<blockquote>\n  this.$http = \'Assign some random thing to the instance method\';\nthis.$http.get(\'/\'); // TypeError: this.$http.get is not a function\n</blockquote>\n<p>相反, 我们的只读实例则能很好的保护我们的库, 因为如果有人试图去覆盖它, 将会获得一个错误: <strong>TypeError: Cannot assign to read only property</strong></p>\n<h4>$</h4>\n<p>您会注意到，我们将库代理为以美元符号“$”为前缀的属性名。 你可能还看过其他的属性和方法，例如，$refs, $on, $mount等等也都是以”$”开头</p>\n<p>虽然属性名上添加前缀不是必须的，但是这样做可以提醒糊涂的开发人员（可能是你），这是一个公共API属性或方法，欢迎你使用，不像其他属性的实例，可能只是为了 Vue 的内部使用。</p>\n<p>作为基于原型的语言，Javascript 中没有（真正的）类，因此也没有 “私有” 和 “公共” 变量或 “静态” 方法。 这个惯例是一种很好的替代品，我们认为是值得遵守的约定。</p>\n<h4>this</h4>\n<p>你还会注意到，你可以使用 this.libraryName 来使用这个库 ，但是这样做会有个小小的问题，因为它现在是一个实例方法。</p>\n<p>然而，这样做的结果是，与全局变量不同，您在使用库时必须确保处于正确的作用域中。内部的回调方法不能通过 this 来访问你的库。</p>\n<p>幸好，ES6中的箭头函数是一个不错的解决方案, 它能确保你在正确的作用域中:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示48\' src=\'//codepen.io/Sylvia31/embed/odGqYG/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/odGqYG/\'>代码演示48</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<h4>为什么不使它成为一个插件？</h4>\n<p>如果您打算在多个 Vue 项目中使用 JavaScript 第三方库，或者您想与世界分享你的库，您可以将其构建成插件！</p>\n<p>插件提取复杂性的部分，允许你在项目中简单地执行以下操作来添加你选择的库：</p>\n<blockquote>\n  // script.js\nimport MyLibraryPlugin from \'my-library-plugin\';\nVue.use(MyLibraryPlugin);\n</blockquote>\n<p>使用这两行，我们可以在任何组件中使用 JavaScript 第三方库，就像我们可以使用 Vue Router ，Vuex 和其他使用 Vue.use 的插件一样。</p>\n<h4>编写一个插件</h4>\n<p>首先，为您的插件创建一个文件。在这个例子中，我将创建一个插件，将 Axios 添加到你所有的 Vue 实例和组件中，因此我将调用文件 axios.js。</p>\n<p>要了解的主要内容是：插件必须公开一个 install 方法，并且将 Vue 构造函数作为第一个参数：</p>\n<blockquote>\n  // axios.js\nexport default {\n  install: function(Vue) {\n    // Do stuff\n  }\n}\n</blockquote>\n<p>现在我们可以使用之前介绍的方法将库添加到原型对象中:</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示49\' src=\'//codepen.io/Sylvia31/embed/erGMgZ/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/erGMgZ/\'>代码演示49</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<p>我们现在需要做的事情是 use 实例方法将我们的库添加到一个项目。例如，我们现在可以轻松地添加 Axios 库：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示50\' src=\'//codepen.io/Sylvia31/embed/deVmNJ/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/deVmNJ/\'>代码演示50</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<h4>彩蛋: 插件可选参数</h4>\n<p>你插件里的 install 方法允许接受可选参数。 一些开发人员可能不是很喜欢使用 axios 实例的方法名 $http ，因为 Vue Resource 已经使用了这个名字，所以让我们使用一个可选参数来让它们变成你所喜欢的方法名：</p>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示50\' src=\'//codepen.io/Sylvia31/embed/deVmNJ/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/deVmNJ/\'>代码演示50</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n<iframe height=\'265\' scrolling=\'no\' title=\'代码演示50\' src=\'//codepen.io/Sylvia31/embed/deVmNJ/?height=265&theme-id=light&default-tab=js&embed-version=2\' frameborder=\'no\' allowtransparency=\'true\' allowfullscreen=\'true\' style=\'width: 100%;\'>See the Pen <a href=\'https://codepen.io/Sylvia31/pen/deVmNJ/\'>代码演示50</a> by Sylvia (<a href=\'https://codepen.io/Sylvia31\'>@Sylvia31</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n  </div>', 'f33afb36a4d6a3921acd242938a6e619.jpeg', 'vue', '2015-05-10', 'http://www.css88.com/archives/7939');
COMMIT;

-- ----------------------------
--  Table structure for `comment_table`
-- ----------------------------
DROP TABLE IF EXISTS `comment_table`;
CREATE TABLE `comment_table` (
  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  `comment` text NOT NULL,
  `commentID` text NOT NULL,
  `post_time` text NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=125 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `comment_table`
-- ----------------------------
BEGIN;
INSERT INTO `comment_table` VALUES ('116', 'MySQL', 'a boolean field.', '60', '1524985304'), ('117', 'MySQL 2', 'automatically filtered out ', '60', '1524985319'), ('118', 'MySQL 3', ' At first this is not obvious ', '60', '1524985510'), ('119', '路人甲', '谢谢分享', '67', '1525092156'), ('120', '路人乙', '已阅', '67', '1525094060'), ('121', '路人甲', '已阅', '81', '1525699045'), ('122', '路人乙', '谢谢分享', '81', '1525701386'), ('123', '路人甲', '谢谢分享', '99', '1525931038'), ('124', 'A君', '写得真好', '92', '1525931346');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
